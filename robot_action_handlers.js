import { policy } from './policy.js';


class UnitreeA1 {
    constructor() {
        this.dynamic_joint_description = tf.tensor2d(
            [[ 0.34558418,  0.82161814,  0.33043706, -1.3031572 ,
                0.9053559 ,  0.44637457, -0.5369532 ,  0.5811181 ,
                0.3645724 ,  0.2941325 ,  0.02842224,  0.546713  ,
               -0.73645407, -0.16290995, -0.48211932,  0.5988462 ,
                0.03972211, -0.29245675, -0.78190845, -0.25719225,
                0.00814218, -0.2756029 ,  1.2940638 ],
              [-0.1747721 , -0.4221904 ,  0.213643  ,  0.21732193,
                2.1178389 , -1.1120207 , -0.37760502,  2.0427716 ,
                0.646703  ,  0.66306335, -0.5140064 , -1.6480752 ,
                0.16746475,  0.10901409, -1.227352  , -0.68322664,
               -0.07204368, -0.9447516 , -0.09826997,  0.09548303,
                0.03558624, -0.5062917 ,  0.5937481 ],
              [ 0.73165226, -0.50144005,  0.87916064, -1.0717874 ,
                0.9144672 , -0.02006345, -1.2487489 , -0.31389946,
                0.05410228,  0.27279133, -0.9821881 , -1.107373  ,
                0.19958453, -0.4667496 ,  0.23550561,  0.7595195 ,
               -1.6487874 ,  0.25438812,  1.2246469 , -0.29752684,
               -0.81081456,  0.7522438 ,  0.25344652],
              [-0.11001077, -0.44582814,  0.7753238 ,  0.19363284,
               -1.6308492 , -1.1951631 ,  0.88378906,  0.67976505,
               -0.64024335, -0.0010488 ,  0.44557357,  0.46840432,
                0.8762422 ,  0.25648564, -0.09482834, -0.25884807,
                1.0557429 , -2.2508543 , -0.13865532,  0.0330001 ,
               -1.425349  ,  0.33281362, -0.651281  ],
              [ 1.2188436 ,  0.3829296 , -0.87572116, -1.5143186 ,
                1.7533841 , -0.11129219, -0.68856496,  0.14425708,
               -0.19141133,  0.8521423 ,  0.03392818,  0.01374958,
               -0.7145797 ,  0.4695681 , -1.0338668 ,  0.66588944,
                1.5239375 , -1.524686  , -2.4662292 ,  0.61687875,
                2.5478978 , -1.0009248 , -1.2506957 ],
              [-0.34811747,  0.5320021 , -0.40530238,  0.27788284,
               -0.17653325, -0.84467113, -0.31982625, -0.95039964,
                0.00651499, -1.1238662 , -1.0928943 ,  1.4569619 ,
               -0.05318422, -0.05390203,  0.5115364 , -0.420857  ,
               -0.22853537,  0.42514873,  0.28241584, -1.1592968 ,
                0.8333426 , -0.59043497, -1.0560789 ],
              [-1.1755359 ,  0.16007589, -2.1378243 , -0.00156693,
                0.8995664 , -0.23666333, -0.6293549 ,  0.23151107,
                0.70015174,  0.66365755,  1.9724739 ,  0.20916747,
               -0.5924101 , -0.12597919, -0.07249855,  0.10873739,
               -0.03002781,  0.17396595, -1.67085   ,  0.82962894,
               -0.5747393 , -1.1731586 ,  0.63775116],
              [-0.9322203 ,  2.8715672 ,  0.8802586 , -1.1392946 ,
               -0.77963793,  0.08697925, -1.5547311 ,  0.1686304 ,
               -0.45907155,  1.2262706 ,  0.9621547 , -2.7112854 ,
                0.04170259, -1.6174675 ,  1.109638  ,  0.16810587,
                0.54840547, -1.0651248 ,  1.8284303 ,  2.0200734 ,
               -1.064771  ,  0.37281513, -0.6733024 ],
              [-0.9691795 , -0.2960838 ,  0.5014829 , -0.64756066,
               -0.23931243, -0.5636398 , -0.13346076, -1.1705426 ,
               -0.43798807, -0.20689292, -0.33372602,  0.05668996,
               -0.2931022 ,  0.7532114 , -0.32319593, -0.1366496 ,
               -0.66478133, -0.5265148 , -1.2644928 ,  0.51878494,
               -1.142518  , -0.7458564 ,  0.35924464],
              [ 0.4205133 ,  0.25956345, -1.4123812 ,  0.7703221 ,
               -0.7010998 , -1.1261882 ,  0.09573071, -0.17847043,
                0.20262401, -1.605748  ,  1.8122301 , -0.6026586 ,
               -1.5396593 ,  0.6188422 , -0.35480413,  0.3248585 ,
               -0.33960843, -0.05974036,  0.24577284, -0.7466529 ,
                0.6787396 , -0.4699001 , -0.86968714],
              [-0.8625198 ,  0.61978555, -1.7603288 , -1.0308641 ,
                0.03952289, -1.3610594 ,  0.02799426, -0.05486312,
                0.8987398 , -0.91479033, -0.6259065 ,  0.33318168,
               -2.4575636 ,  3.1000423 , -0.6986507 , -0.72983503,
                0.8611275 , -0.03983184, -1.7794286 ,  0.6269274 ,
                0.85537785, -0.44994628, -0.28160036],
              [ 0.19929852, -0.6749326 , -1.3921019 , -0.22560583,
               -0.87542224,  1.0014102 ,  0.14408536,  0.7820845 ,
                0.13462193,  0.26290113, -0.7829989 ,  0.6680474 ,
                1.7846982 , -0.30968755, -0.5927745 , -0.1578367 ,
               -0.4812803 , -0.7014793 ,  0.13819364, -0.29091755,
                1.4388736 ,  0.00020164,  0.32391196]],
            [12, 23]
        );

        this.dynamic_foot_description = tf.tensor2d(
            [[-0.6326942 , -0.8083277 , -0.36626703, -0.11471739,
                -1.4013182 , -0.03509478, -1.6674865 ,  1.3921384 ,
                -0.08099695, -0.6419577 ],
               [-0.22307947, -1.044511  , -0.9197951 , -0.187175  ,
                -0.5207837 ,  0.9392131 ,  1.1378704 ,  0.0160212 ,
                 0.47359958, -1.3351884 ],
               [ 0.4846683 ,  1.6003561 , -2.2808578 ,  0.26094818,
                -1.0991191 ,  0.5921967 , -1.3133135 , -0.49539956,
                 0.20273376,  0.61350936],
               [-0.55353224,  0.8845029 , -0.00549962, -1.6838144 ,
                 0.8436627 ,  0.41624847,  0.8734155 , -0.33662745,
                 0.82815653, -1.061065  ]],
            [4, 10]
        );

        this.general_policy_state_second_part = tf.tensor1d(
            [-1.6791492,   1.3333712,  -1.3550704,  -1.1994606, 0.5170822,   1.0184087,  -0.6686805,   0.54012716],
        );

        this.p_gain = 20.0;
        this.d_gain = 0.5;
        this.scaling_factor = 0.25;
        this.nominal_position = new Float32Array([-0.1, -0.8, 1.5, 0.1, 0.8, -1.5, 0.1, -1.0, 1.5, -0.1, 1.0, -1.5]);
        this.foot_indices = [19, 29, 39, 49];
        this.foot_contact_threshold = 0.015;
        this.previous_action = new Float32Array(12);
    }

    action(simulation, model) {
        let qpos = simulation.qpos;
        let qvel = simulation.qvel;

        let dynamic_joint_observations = []
        for (let i = 0; i < model.nu; i++) {
            dynamic_joint_observations.push([qpos[7 + i], qvel[6 + i], this.previous_action[i]]);
        }
        let dynamic_joint_observations_tf = tf.tensor2d(dynamic_joint_observations, [model.nu, 3]);

        let dynamic_foot_observations_tf = tf.tensor1d([0.0,]);
        let z_pos_all_geoms = simulation.geom_xpos.filter((_, i) => i % 3 == 2)
        let foot_z_pos = this.foot_indices.map(i => z_pos_all_geoms[i]);
        let foot_contacts = foot_z_pos.map(z => z < this.foot_contact_threshold ? 1.0 : 0.0);
        // TODO: calculate foot contact time
        // TODO: Make sure everything is in right foot order
        // TODO: Create the tf

        let general_state_tf = tf.tensor1d([0.0,]);

        // TODO: Normalize and clip

        let action = tf.tidy(() => {
            return policy(this.dynamic_joint_description, dynamic_joint_observations_tf, this.dynamic_foot_description, dynamic_foot_observations_tf, general_state_tf);
        })
        let nn_action = new Float32Array(model.nu);

        for (let i = 0; i < model.nu; i++) {
            let scaled_action = this.scaling_factor * nn_action[i];
            let target_joint_pos = this.nominal_position[i] + scaled_action;
            let torque = this.p_gain * (target_joint_pos - qpos[7 + i]) - this.d_gain * qvel[6 + i];
            simulation.ctrl[i] = torque;
            this.previous_action[i] = nn_action[i];
        }
    }

    reset() {
        this.previous_action.fill(0.0);
    }
}


export function create_robot_action_handlers() {
    return {
        "unitree_a1/unitree_a1.xml": new UnitreeA1()
    }
}