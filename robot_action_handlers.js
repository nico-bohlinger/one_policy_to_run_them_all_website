import * as THREE from 'three';
import { policy } from './policy.js';


class UnitreeA1 {
    constructor() {
        this.dynamic_joint_description = tf.tensor2d(
            [[0.6946284174919128, -0.21824967861175537, 0.3838578462600708, 1.0, 0.0, 0.0, 0.0, -0.021739130839705467, -0.9330000281333923, 0.20000000298023224, -1.0, -0.8999999761581421, -1.0, -0.6666666865348816, -0.17453283071517944, 0.17453283071517944, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [0.6946284174919128, -0.6096015572547913, 0.41939613223075867, 0.0, -0.9950041770935059, 0.0998334139585495, 0.0, -0.17391304671764374, -0.9330000281333923, 0.20000000298023224, -1.0, -0.8999999761581421, -1.0, -0.6666666865348816, -0.9106065034866333, 0.2276521772146225, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [0.2660880982875824, -0.6739331483840942, -0.1609022319316864, 0.0, -0.9950041770935059, 0.0998334139585495, -1.0, 0.32608696818351746, -0.9330000281333923, 0.20000000298023224, -1.0, -0.8999999761581421, -1.0, -0.6666666865348816, 0.19919522106647491, 0.5862021446228027, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [0.6946284174919128, 0.21645677089691162, 0.3838578462600708, 1.0, 0.0, 0.0, 0.0, 0.021739130839705467, -0.9330000281333923, 0.20000000298023224, -1.0, -0.8999999761581421, -1.0, -0.6666666865348816, -0.17453283071517944, 0.17453283071517944, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [0.6946284174919128, 0.6078086495399475, 0.41939613223075867, 0.0, 0.9950041770935059, 0.0998334139585495, 0.0, 0.17391304671764374, -0.9330000281333923, 0.20000000298023224, -1.0, -0.8999999761581421, -1.0, -0.6666666865348816, -0.2276521772146225, 0.9106065034866333, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [0.2660880982875824, 0.6721402406692505, -0.1609022319316864, 0.0, 0.9950041770935059, 0.0998334139585495, -1.0, -0.32608696818351746, -0.9330000281333923, 0.20000000298023224, -1.0, -0.8999999761581421, -1.0, -0.6666666865348816, -0.5862021446228027, -0.19919522106647491, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [-0.39859259128570557, -0.21824967861175537, 0.3838578462600708, -1.0, 0.0, 0.0, 0.0, 0.021739130839705467, -0.9330000281333923, 0.20000000298023224, -1.0, -0.8999999761581421, -1.0, -0.6666666865348816, -0.17453283071517944, 0.17453283071517944, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [-0.39859259128570557, -0.6096015572547913, 0.41939613223075867, 0.0, -0.9950041770935059, 0.0998334139585495, 0.0, -0.21739129722118378, -0.9330000281333923, 0.20000000298023224, -1.0, -0.8999999761581421, -1.0, -0.6666666865348816, -0.9106065034866333, 0.2276521772146225, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [-0.9012777209281921, -0.6594913005828857, -0.030630452558398247, 0.0, -0.9950041770935059, 0.0998334139585495, -1.0, 0.32608696818351746, -0.9330000281333923, 0.20000000298023224, -1.0, -0.8999999761581421, -1.0, -0.6666666865348816, 0.19919522106647491, 0.5862021446228027, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [-0.39859259128570557, 0.21645677089691162, 0.3838578462600708, -1.0, 0.0, 0.0, 0.0, -0.021739130839705467, -0.9330000281333923, 0.20000000298023224, -1.0, -0.8999999761581421, -1.0, -0.6666666865348816, -0.17453283071517944, 0.17453283071517944, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [-0.39859259128570557, 0.6078086495399475, 0.41939613223075867, 0.0, 0.9950041770935059, 0.0998334139585495, 0.0, 0.21739129722118378, -0.9330000281333923, 0.20000000298023224, -1.0, -0.8999999761581421, -1.0, -0.6666666865348816, -0.2276521772146225, 0.9106065034866333, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [-0.9012777209281921, 0.657698392868042, -0.030630452558398247, 0.0, 0.9950041770935059, 0.0998334139585495, -1.0, -0.32608696818351746, -0.9330000281333923, 0.20000000298023224, -1.0, -0.8999999761581421, -1.0, -0.6666666865348816, -0.5862021446228027, -0.19919522106647491, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783]],
            [12, 23]
        );

        this.dynamic_foot_description = tf.tensor2d(
            [[0.6509363651275635, -0.7445561289787292, -0.7979517579078674, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [0.6509363651275635, 0.7427632212638855, -0.7979517579078674, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [-0.6148743629455566, -0.7405243515968323, -0.7615832686424255, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783], [-0.6148743629455566, 0.7387314438819885, -0.7615832686424255, -0.6000000238418579, -0.5, -0.375, -0.8534941077232361, -0.33041900396347046, -0.567524254322052, -0.5221588611602783]],
            [4, 10]
        );

        this.general_policy_state_second_part = new Float32Array(
          [-0.6, -0.5, -0.375, -0.8534941176470588, -0.33041901219618564, -0.5675242453164081, -0.5221588713958225],
        );

        this.action_dt = 0.02
        this.p_gain = 20.0;
        this.d_gain = 0.5;
        this.scaling_factor = 0.25;
        this.nominal_position = new Float32Array([-0.1, -0.8, 1.5, 0.1, 0.8, -1.5, 0.1, -1.0, 1.5, -0.1, 1.0, -1.5]);
        this.foot_indices = [19, 29, 39, 49];
        this.foot_contact_threshold = 0.015;
        this.previous_action = new Float32Array(12);
        this.feet_contact_times = new Float32Array(4);
    }

    action(simulation, model) {
        let qpos = simulation.qpos;
        let qvel = simulation.qvel;
        let dynamic_joint_observations = []
        for (let i = 0; i < model.nu; i++) {
            dynamic_joint_observations.push([
              (qpos[7 + i] - this.nominal_position[i]) / 4.6,
              qvel[6 + i] / 35.0,
              this.previous_action[i] / 10.0
            ]);
        }
        let dynamic_joint_observations_tf = tf.tensor2d(dynamic_joint_observations, [model.nu, 3]);

        let z_pos_all_geoms = simulation.geom_xpos.filter((_, i) => i % 3 == 2)
        let foot_z_pos = this.foot_indices.map(i => z_pos_all_geoms[i]);
        let foot_contacts = foot_z_pos.map(z => z < this.foot_contact_threshold ? 1.0 : 0.0);
        this.feet_contact_times = this.feet_contact_times.map((t, i) => foot_contacts[i] == 1 ? t + this.action_dt : 0.0);
        let dynamic_foot_observations = []
        for (let i = 0; i < 4; i++) {
          dynamic_foot_observations.push([
            (foot_contacts[i] / 0.5) - 1.0,
            Math.min(Math.max((this.feet_contact_times[i] / (5.0 / 2)) - 1.0, -1.0), 1.0)
          ]);
        }
        let dynamic_foot_observations_tf = tf.tensor2d(dynamic_foot_observations, [4, 2]);

        let quat = new THREE.Quaternion(qpos[4], qpos[5], qpos[6], qpos[3]);
        let inverse_quat = quat.invert();
        let trunk_angular_velocity = new Float32Array([qvel[3], qvel[4], qvel[5]]);
        for (let i = 0; i < 3; i++) {
          trunk_angular_velocity[i] = Math.min(Math.max(trunk_angular_velocity[i] / 50.0, -1.0), 1.0);
        }
        let goal_velocity = new Float32Array([1.0, 0.0, 0.0]);
        let gravity_vector = new THREE.Vector3(0.0, 0.0, -1.0);
        let projected_gravity_vector_three = gravity_vector.applyQuaternion(inverse_quat);
        let projected_gravity_vector = new Float32Array([projected_gravity_vector_three.x, projected_gravity_vector_three.y, projected_gravity_vector_three.z]);
        let general_state_tf = tf.tensor1d([
          ...trunk_angular_velocity,
          ...goal_velocity,
          ...projected_gravity_vector,
          ...this.general_policy_state_second_part
        ]);

        let nn_action = policy(this.dynamic_joint_description, dynamic_joint_observations_tf, this.dynamic_foot_description, dynamic_foot_observations_tf, general_state_tf).dataSync();

        for (let i = 0; i < model.nu; i++) {
            let scaled_action = this.scaling_factor * nn_action[i];
            let target_joint_pos = this.nominal_position[i] + scaled_action;
            let torque = this.p_gain * (target_joint_pos - qpos[7 + i]) - this.d_gain * qvel[6 + i];
            simulation.ctrl[i] = torque;
            this.previous_action[i] = nn_action[i];
        }
    }

    reset() {
        this.previous_action.fill(0.0);
        this.feet_contact_times.fill(0.0);
    }
}


export function create_robot_action_handlers() {
    return {
        "unitree_a1/unitree_a1.xml": new UnitreeA1()
    }
}